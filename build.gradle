buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net/"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            url = "https://repo1.maven.org/maven2/"
        }
    }
    dependencies {
        classpath('com.anatawa12.forge:ForgeGradle:1.2-1.0.+') {
            changing = true
        }
    }
}

allprojects {
    tasks.withType(JavaCompile) {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }
}

apply plugin: 'forge'

dependencies {
    compile files('./lib/DragonAPI 1.7.10 V31b-deobf.jar') // Needs to be manually deobfuscated
    compile files('./lib/RotaryCraft 1.7.10 V31b.jar')
    compile files('./lib/ReactorCraft 1.7.10 V31b.jar')
    compile files('./lib/VoidMonster 1.7.10 V31a.jar')
}

ext.configFile = file "src/main/resources/version_voidcore.properties"
configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

minecraft {
    version = config.MinecraftVersion + "-" + config.ForgeVersion
    runDir = "run"

    replace "@MAJOR_VERSION@", config.Major
    replaceIn "VoidCore.java"
    replaceIn "version_voidcore.properties"

    replace "@MINOR_VERSION@", config.Minor
    replaceIn "VoidCore.java"
    replaceIn "version_voidcore.properties"

    replace "@DEPENDENCIES@", config.Dependencies
    replaceIn "VoidCore.java"
}

group = "voidentente"
archivesBaseName = "VoidCore " + project.minecraft.version + " V" + config.Major + config.Minor

processResources {
    inputs.property "Major", config.Major
    inputs.property "Minor", config.Minor
    inputs.property "MinecraftVersion", project.minecraft.version
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"
        expand "Major":config.Major, "Minor":config.Minor, "MinecraftVersion":project.minecraft.version
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {}

task devJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
}

task sourceJar(type: Jar) {
    from sourceSets.main.java
    classifier = 'src'
}

artifacts {
    archives sourceJar, devJar
}